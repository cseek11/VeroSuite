name: Enterprise Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Pre-commit Quality Gates
  pre-commit-checks:
    name: Pre-commit Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Lint backend code
        run: |
          cd backend
          npm run lint

      - name: Lint frontend code
        run: |
          cd frontend
          npm run lint

      - name: Type check backend
        run: |
          cd backend
          npm run typecheck

      - name: Type check frontend
        run: |
          cd frontend
          npm run typecheck

      - name: Security audit
        run: |
          cd backend && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate

      - name: Dependency vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Unit and Component Tests
  unit-tests:
    name: Unit and Component Tests
    runs-on: ubuntu-latest
    needs: pre-commit-checks
    strategy:
      matrix:
        test-suite: [backend-unit, frontend-unit, backend-component, frontend-component]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run backend unit tests
        if: matrix.test-suite == 'backend-unit'
        run: |
          cd backend
          npm run test:unit -- --coverage --maxWorkers=4

      - name: Run frontend unit tests
        if: matrix.test-suite == 'frontend-unit'
        run: |
          cd frontend
          npm run test:unit -- --coverage --maxWorkers=4

      - name: Run backend component tests
        if: matrix.test-suite == 'backend-component'
        run: |
          cd backend
          npm run test:component -- --coverage

      - name: Run frontend component tests
        if: matrix.test-suite == 'frontend-component'
        run: |
          cd frontend
          npm run test:component -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verosuite_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup test database
        run: |
          cd backend
          npm run db:generate
          npm run db:push

      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration -- --maxWorkers=2

      - name: Run workflow tests
        run: |
          cd backend
          npm run test:workflow -- --maxWorkers=2

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run OWASP security tests
        run: |
          cd backend
          npm run test:security

      - name: Run SAST scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true

      - name: Run DAST scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: security-tests
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: verosuite_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup test database
        run: |
          cd backend
          npm run db:generate
          npm run db:push

      - name: Start application
        run: |
          cd backend
          npm run start:test &
          sleep 30

      - name: Run load tests
        run: |
          cd backend/test/performance
          k6 run load-testing.js

      - name: Run stress tests
        run: |
          cd backend/test/performance
          k6 run stress-testing.js

      - name: Run performance regression tests
        run: |
          cd backend
          npm run test:performance

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: performance-tests
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        viewport: [desktop, mobile, tablet]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install ${{ matrix.browser }}

      - name: Setup test database
        run: |
          cd backend
          npm run db:generate
          npm run db:push

      - name: Start application
        run: |
          cd backend
          npm run start:test &
          cd ../frontend
          npm run build
          npm run preview &
          sleep 30

      - name: Run E2E tests
        run: |
          cd frontend
          npx playwright test --project=${{ matrix.browser }}-${{ matrix.viewport }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.viewport }}
          path: frontend/playwright-report/
          retention-days: 30

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install

      - name: Start application
        run: |
          cd frontend
          npm run build
          npm run preview &
          sleep 30

      - name: Run accessibility tests
        run: |
          cd frontend
          npx playwright test --grep="accessibility"

      - name: Run axe-core tests
        run: |
          cd frontend
          npm run test:accessibility

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, performance-tests, e2e-tests, accessibility-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Check test coverage
        run: |
          cd backend
          npm run test:coverage
          cd ../frontend
          npm run test:coverage

      - name: Check performance thresholds
        run: |
          cd backend
          npm run test:performance:thresholds

      - name: Check security score
        run: |
          cd backend
          npm run test:security:score

      - name: Generate quality report
        run: |
          cd backend
          npm run test:quality:report

      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: backend/quality-report/
          retention-days: 30

  # Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment steps here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging"
          # Add smoke test steps here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add deployment steps here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on production"
          # Add smoke test steps here

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#testing'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Notify Teams
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
          status: ${{ job.status }}
          title: 'Enterprise Testing Pipeline'
          summary: 'Testing pipeline completed'






