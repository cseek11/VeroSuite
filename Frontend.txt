import React, { useState, useEffect } from 'react';
import { Calendar, MapPin, Clock, User, Phone, DollarSign, CheckCircle, AlertCircle, Plus, Search, Filter, Route, Zap, Users, Building2, BarChart3 } from 'lucide-react';

// Mock data to simulate real backend
const mockTenants = {
  'ace-pest': {
    name: 'Ace Pest Control',
    theme: {
      primary: '#dc2626',
      secondary: '#991b1b',
      accent: '#f59e0b'
    }
  },
  'green-shield': {
    name: 'Green Shield Exterminators', 
    theme: {
      primary: '#059669',
      secondary: '#047857',
      accent: '#0891b2'
    }
  }
};

const mockCustomers = [
  {
    id: '1',
    name: 'Downtown Restaurant Group',
    type: 'commercial',
    locations: [
      { id: '1a', name: 'Main Street Location', address: '123 Main St, Pittsburgh, PA', lat: 40.4406, lng: -79.9959 },
      { id: '1b', name: 'Strip District Location', address: '456 Penn Ave, Pittsburgh, PA', lat: 40.4515, lng: -79.9717 }
    ],
    contact: 'Sarah Johnson',
    phone: '(412) 555-0123',
    arBalance: 450.00,
    lastService: '2025-07-15'
  },
  {
    id: '2', 
    name: 'Office Complex LLC',
    type: 'commercial',
    locations: [
      { id: '2a', name: 'Corporate Plaza', address: '789 Liberty Ave, Pittsburgh, PA', lat: 40.4417, lng: -79.9901 }
    ],
    contact: 'Mike Chen',
    phone: '(412) 555-0456',
    arBalance: 0,
    lastService: '2025-08-10'
  },
  {
    id: '3',
    name: 'Westfield Apartments',
    type: 'residential',
    locations: [
      { id: '3a', name: 'Building A', address: '321 Fifth Ave, Pittsburgh, PA', lat: 40.4472, lng: -79.9473 },
      { id: '3b', name: 'Building B', address: '325 Fifth Ave, Pittsburgh, PA', lat: 40.4475, lng: -79.9470 }
    ],
    contact: 'Lisa Rodriguez',
    phone: '(412) 555-0789',
    arBalance: 225.50,
    lastService: '2025-08-05'
  }
];

const mockTechnicians = [
  {
    id: 'tech1',
    name: 'John Smith',
    phone: '(412) 555-1001',
    skills: ['general', 'commercial', 'rodent'],
    status: 'available',
    currentLocation: { lat: 40.4406, lng: -79.9959 }
  },
  {
    id: 'tech2', 
    name: 'Maria Garcia',
    phone: '(412) 555-1002',
    skills: ['general', 'residential', 'termite'],
    status: 'in_progress',
    currentLocation: { lat: 40.4515, lng: -79.9717 }
  },
  {
    id: 'tech3',
    name: 'David Wilson',
    phone: '(412) 555-1003', 
    skills: ['commercial', 'rodent', 'bed_bug'],
    status: 'available',
    currentLocation: { lat: 40.4417, lng: -79.9901 }
  }
];

const mockJobs = [
  {
    id: 'job1',
    customerId: '1',
    locationId: '1a',
    customer: 'Downtown Restaurant Group',
    location: 'Main Street Location',
    address: '123 Main St, Pittsburgh, PA',
    serviceType: 'Monthly Service',
    status: 'scheduled',
    priority: 'high',
    scheduledDate: '2025-08-18',
    timeWindow: '09:00-11:00',
    technicianId: 'tech1',
    technician: 'John Smith',
    estimatedDuration: 90,
    specialInstructions: 'Kitchen treatment required - restaurant opens at 11 AM',
    value: 185.00
  },
  {
    id: 'job2',
    customerId: '2', 
    locationId: '2a',
    customer: 'Office Complex LLC',
    location: 'Corporate Plaza',
    address: '789 Liberty Ave, Pittsburgh, PA',
    serviceType: 'Quarterly Service',
    status: 'unassigned',
    priority: 'medium',
    scheduledDate: '2025-08-18',
    timeWindow: '13:00-16:00',
    technicianId: null,
    technician: null,
    estimatedDuration: 120,
    specialInstructions: 'Basement and parking garage treatment',
    value: 325.00
  },
  {
    id: 'job3',
    customerId: '3',
    locationId: '3a', 
    customer: 'Westfield Apartments',
    location: 'Building A',
    address: '321 Fifth Ave, Pittsburgh, PA',
    serviceType: 'Bed Bug Treatment',
    status: 'in_progress',
    priority: 'urgent',
    scheduledDate: '2025-08-18',
    timeWindow: '08:00-12:00',
    technicianId: 'tech2',
    technician: 'Maria Garcia',
    estimatedDuration: 180,
    specialInstructions: 'Units 2A, 2B, 3C - residents relocated',
    value: 850.00
  },
  {
    id: 'job4',
    customerId: '1',
    locationId: '1b',
    customer: 'Downtown Restaurant Group', 
    location: 'Strip District Location',
    address: '456 Penn Ave, Pittsburgh, PA',
    serviceType: 'Monthly Service',
    status: 'completed',
    priority: 'medium',
    scheduledDate: '2025-08-17',
    timeWindow: '14:00-16:00',
    technicianId: 'tech3',
    technician: 'David Wilson',
    estimatedDuration: 75,
    specialInstructions: 'Exterior perimeter treatment',
    value: 165.00
  }
];

const VeroFieldDispatcherDashboard = () => {
  const [currentTenant, setCurrentTenant] = useState('ace-pest');
  const [activeTab, setActiveTab] = useState('dashboard');
  const [selectedJob, setSelectedJob] = useState(null);
  const [jobs, setJobs] = useState(mockJobs);
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showRouteOptimization, setShowRouteOptimization] = useState(false);

  const tenant = mockTenants[currentTenant];
  const theme = tenant.theme;

  // Filter jobs based on status and search
  const filteredJobs = jobs.filter(job => {
    const matchesStatus = filterStatus === 'all' || job.status === filterStatus;
    const matchesSearch = job.customer.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         job.location.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesStatus && matchesSearch;
  });

  const getStatusColor = (status) => {
    switch(status) {
      case 'scheduled': return 'bg-blue-100 text-blue-800';
      case 'unassigned': return 'bg-yellow-100 text-yellow-800';
      case 'in_progress': return 'bg-orange-100 text-orange-800';
      case 'completed': return 'bg-green-100 text-green-800';
      case 'cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'urgent': return 'text-red-600';
      case 'high': return 'text-orange-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-green-600';
      default: return 'text-gray-600';
    }
  };

  const assignTechnician = (jobId, technicianId) => {
    const technician = mockTechnicians.find(t => t.id === technicianId);
    setJobs(jobs.map(job => 
      job.id === jobId 
        ? { ...job, technicianId, technician: technician.name, status: 'scheduled' }
        : job
    ));
    setSelectedJob(null);
  };

  const optimizeRoutes = () => {
    setShowRouteOptimization(true);
    // Simulate route optimization
    setTimeout(() => {
      setJobs(jobs.map(job => {
        if (job.status === 'unassigned') {
          // Auto-assign based on proximity and skills
          const availableTech = mockTechnicians.find(t => t.status === 'available');
          return {
            ...job,
            technicianId: availableTech?.id,
            technician: availableTech?.name,
            status: 'scheduled'
          };
        }
        return job;
      }));
      setShowRouteOptimization(false);
    }, 2000);
  };

  const todayJobs = jobs.filter(job => job.scheduledDate === '2025-08-18');
  const completedToday = todayJobs.filter(job => job.status === 'completed').length;
  const inProgress = todayJobs.filter(job => job.status === 'in_progress').length;
  const scheduled = todayJobs.filter(job => job.status === 'scheduled').length;
  const unassigned = todayJobs.filter(job => job.status === 'unassigned').length;
  const todayRevenue = todayJobs.filter(job => job.status === 'completed').reduce((sum, job) => sum + job.value, 0);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Dynamic Theme Styles */}
      <style>{`
        .theme-primary { background-color: ${theme.primary}; }
        .theme-primary-text { color: ${theme.primary}; }
        .theme-secondary { background-color: ${theme.secondary}; }
        .theme-accent { color: ${theme.accent}; }
        .theme-border { border-color: ${theme.primary}; }
        .theme-hover:hover { background-color: ${theme.primary}; }
      `}</style>

      {/* Top Navigation */}
      <nav className="theme-primary shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Building2 className="h-8 w-8 text-white mr-3" />
              <div>
                <h1 className="text-xl font-semibold text-white">VeroField</h1>
                <p className="text-sm text-white/80">{tenant.name}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <select 
                value={currentTenant}
                onChange={(e) => setCurrentTenant(e.target.value)}
                className="bg-white/10 border border-white/20 rounded-md px-3 py-1 text-white text-sm"
              >
                <option value="ace-pest">Ace Pest Control</option>
                <option value="green-shield">Green Shield Exterminators</option>
              </select>
              <div className="flex items-center text-white">
                <User className="h-5 w-5 mr-2" />
                <span className="text-sm">Sarah Thompson (Dispatcher)</span>
              </div>
            </div>
          </div>
        </div>
      </nav>

      {/* Tab Navigation */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            {[
              { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
              { id: 'jobs', label: 'Jobs & Scheduling', icon: Calendar },
              { id: 'customers', label: 'Customers', icon: Users },
              { id: 'routes', label: 'Route Optimization', icon: Route }
            ].map(tab => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center py-4 px-2 border-b-2 text-sm font-medium ${
                    activeTab === tab.id
                      ? 'theme-border theme-primary-text'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-4 w-4 mr-2" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Dashboard Tab */}
        {activeTab === 'dashboard' && (
          <div className="space-y-6">
            {/* KPI Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <CheckCircle className="h-8 w-8 text-green-500" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Completed Today</p>
                    <p className="text-2xl font-semibold text-gray-900">{completedToday}</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <Clock className="h-8 w-8 text-orange-500" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">In Progress</p>
                    <p className="text-2xl font-semibold text-gray-900">{inProgress}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <Calendar className="h-8 w-8 text-blue-500" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Scheduled</p>
                    <p className="text-2xl font-semibold text-gray-900">{scheduled}</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <div className="flex items-center">
                  <DollarSign className="h-8 w-8 text-green-600" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Today's Revenue</p>
                    <p className="text-2xl font-semibold text-gray-900">${todayRevenue.toFixed(2)}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Alert for Unassigned Jobs */}
            {unassigned > 0 && (
              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                <div className="flex">
                  <AlertCircle className="h-5 w-5 text-yellow-400" />
                  <div className="ml-3">
                    <p className="text-sm text-yellow-700">
                      <strong>{unassigned} jobs</strong> need technician assignment for today.{' '}
                      <button 
                        onClick={() => setActiveTab('jobs')}
                        className="underline hover:text-yellow-900"
                      >
                        View jobs
                      </button>{' '}
                      or{' '}
                      <button 
                        onClick={optimizeRoutes}
                        className="underline hover:text-yellow-900"
                      >
                        auto-assign with route optimization
                      </button>
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Today's Schedule Overview */}
            <div className="bg-white rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-medium text-gray-900">Today's Schedule Overview</h3>
              </div>
              <div className="p-6">
                <div className="space-y-4">
                  {mockTechnicians.map(tech => {
                    const techJobs = todayJobs.filter(job => job.technicianId === tech.id);
                    const totalValue = techJobs.reduce((sum, job) => sum + job.value, 0);
                    
                    return (
                      <div key={tech.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center">
                          <User className="h-8 w-8 text-gray-400 mr-3" />
                          <div>
                            <p className="font-medium text-gray-900">{tech.name}</p>
                            <p className="text-sm text-gray-600">{tech.phone}</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="text-sm font-medium text-gray-900">{techJobs.length} jobs</p>
                          <p className="text-sm text-gray-600">${totalValue.toFixed(2)} value</p>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Jobs Tab */}
        {activeTab === 'jobs' && (
          <div className="space-y-6">
            {/* Job Management Header */}
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Jobs & Scheduling</h2>
              <div className="flex space-x-3">
                <button 
                  onClick={optimizeRoutes}
                  disabled={showRouteOptimization}
                  className="flex items-center px-4 py-2 theme-primary text-white rounded-md hover:opacity-90 disabled:opacity-50"
                >
                  {showRouteOptimization ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Optimizing...
                    </>
                  ) : (
                    <>
                      <Zap className="h-4 w-4 mr-2" />
                      Optimize Routes
                    </>
                  )}
                </button>
                <button className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                  <Plus className="h-4 w-4 mr-2" />
                  New Job
                </button>
              </div>
            </div>

            {/* Filters and Search */}
            <div className="flex space-x-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="h-4 w-4 absolute left-3 top-3 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search jobs, customers, locations..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
              <select 
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="all">All Status</option>
                <option value="scheduled">Scheduled</option>
                <option value="unassigned">Unassigned</option>
                <option value="in_progress">In Progress</option>
                <option value="completed">Completed</option>
              </select>
            </div>

            {/* Jobs List */}
            <div className="bg-white shadow rounded-lg overflow-hidden">
              <div className="px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-medium text-gray-900">
                  Jobs ({filteredJobs.length})
                </h3>
              </div>
              <div className="divide-y divide-gray-200">
                {filteredJobs.map(job => (
                  <div key={job.id} className="p-6 hover:bg-gray-50">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-4">
                          <div className="flex-shrink-0">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(job.status)}`}>
                              {job.status.replace('_', ' ')}
                            </span>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">{job.customer}</p>
                            <p className="text-sm text-gray-600">{job.location} • {job.address}</p>
                          </div>
                        </div>
                        <div className="mt-2 flex items-center space-x-6 text-sm text-gray-600">
                          <div className="flex items-center">
                            <Calendar className="h-4 w-4 mr-1" />
                            {job.scheduledDate} {job.timeWindow}
                          </div>
                          <div className="flex items-center">
                            <Clock className="h-4 w-4 mr-1" />
                            {job.estimatedDuration}min
                          </div>
                          <div className="flex items-center">
                            <DollarSign className="h-4 w-4 mr-1" />
                            ${job.value.toFixed(2)}
                          </div>
                          <div className={`flex items-center font-medium ${getPriorityColor(job.priority)}`}>
                            <AlertCircle className="h-4 w-4 mr-1" />
                            {job.priority}
                          </div>
                        </div>
                        {job.technician && (
                          <div className="mt-2 flex items-center text-sm text-gray-600">
                            <User className="h-4 w-4 mr-1" />
                            Assigned to: {job.technician}
                          </div>
                        )}
                        {job.specialInstructions && (
                          <div className="mt-2">
                            <p className="text-sm text-gray-600">
                              <strong>Instructions:</strong> {job.specialInstructions}
                            </p>
                          </div>
                        )}
                      </div>
                      <div className="flex-shrink-0 ml-4">
                        {job.status === 'unassigned' && (
                          <button 
                            onClick={() => setSelectedJob(job)}
                            className="px-4 py-2 theme-primary text-white rounded-md hover:opacity-90"
                          >
                            Assign Tech
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Customers Tab */}
        {activeTab === 'customers' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Customer Management</h2>
              <button className="flex items-center px-4 py-2 theme-primary text-white rounded-md hover:opacity-90">
                <Plus className="h-4 w-4 mr-2" />
                New Customer
              </button>
            </div>

            <div className="grid gap-6">
              {mockCustomers.map(customer => (
                <div key={customer.id} className="bg-white rounded-lg shadow p-6">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center space-x-4">
                        <h3 className="text-lg font-medium text-gray-900">{customer.name}</h3>
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          customer.type === 'commercial' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'
                        }`}>
                          {customer.type}
                        </span>
                      </div>
                      
                      <div className="mt-2 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-600">
                        <div className="flex items-center">
                          <User className="h-4 w-4 mr-2" />
                          {customer.contact}
                        </div>
                        <div className="flex items-center">
                          <Phone className="h-4 w-4 mr-2" />
                          {customer.phone}
                        </div>
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-2" />
                          {customer.locations.length} location{customer.locations.length !== 1 ? 's' : ''}
                        </div>
                        <div className="flex items-center">
                          <DollarSign className="h-4 w-4 mr-2" />
                          AR: ${customer.arBalance.toFixed(2)}
                        </div>
                      </div>

                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-gray-900 mb-2">Locations:</h4>
                        <div className="space-y-1">
                          {customer.locations.map(location => (
                            <div key={location.id} className="text-sm text-gray-600">
                              • {location.name} - {location.address}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex space-x-2">
                      <button className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200">
                        View History
                      </button>
                      <button className="px-3 py-1 text-sm theme-primary text-white rounded hover:opacity-90">
                        Schedule Service
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Routes Tab */}
        {activeTab === 'routes' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold text-gray-900">Route Optimization</h2>
              <button 
                onClick={optimizeRoutes}
                className="flex items-center px-4 py-2 theme-primary text-white rounded-md hover:opacity-90"
              >
                <Route className="h-4 w-4 mr-2" />
                Optimize All Routes
              </button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {mockTechnicians.map(tech => {
                const techJobs = todayJobs.filter(job => job.technicianId === tech.id);
                const totalDistance = Math.round(Math.random() * 50 + 30); // Mock distance
                const totalTime = techJobs.reduce((sum, job) => sum + job.estimatedDuration, 0) + totalDistance * 2; // Drive time estimate
                
                return (
                  <div key={tech.id} className="bg-white rounded-lg shadow p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center">
                        <User className="h-8 w-8 text-gray-400 mr-3" />
                        <div>
                          <h3 className="font-medium text-gray-900">{tech.name}</h3>
                          <p className="text-sm text-gray-600">{tech.skills.join(', ')}</p>
                        </div>
                      </div>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        tech.status === 'available' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'
                      }`}>
                        {tech.status.replace('_', ' ')}
                      </span>
                    </div>

                    <div className="space-y-2 mb-4">
                      <div className="flex justify-between text-sm">
                        <span>Jobs Today:</span>
                        <span className="font-medium">{techJobs.length}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span>Total Distance:</span>
                        <span className="font-medium">{totalDistance} miles</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span>Estimated Time:</span>
                        <span className="font-medium">{Math.round(totalTime / 60)}h {totalTime % 60}m</span>
                      </div>
                    </div>

                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-900">Today's Route:</h4>
                      {techJobs.length > 0 ? (
                        <div className="space-y-1">
                          {techJobs.map((job, index) => (
                            <div key={job.id} className="flex items-center text-sm text-gray-600">
                              <div className="flex-shrink-0 w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center text-xs font-medium mr-2">
                                {index + 1}
                              </div>
                              <div>
                                <div className="font-medium">{job.customer}</div>
                                <div className="text-xs">{job.timeWindow}</div>
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <p className="text-sm text-gray-500">No jobs assigned</p>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>

      {/* Job Assignment Modal */}
      {selectedJob && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Assign Technician
              </h3>
              <div className="mb-4 p-3 bg-gray-50 rounded">
                <p className="font-medium">{selectedJob.customer}</p>
                <p className="text-sm text-gray-600">{selectedJob.location}</p>
                <p className="text-sm text-gray-600">{selectedJob.scheduledDate} {selectedJob.timeWindow}</p>
              </div>
              
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Select Technician:</label>
                {mockTechnicians.map(tech => (
                  <button
                    key={tech.id}
                    onClick={() => assignTechnician(selectedJob.id, tech.id)}
                    className="w-full text-left p-3 border rounded hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-medium">{tech.name}</p>
                        <p className="text-sm text-gray-600">{tech.skills.join(', ')}</p>
                      </div>
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        tech.status === 'available' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'
                      }`}>
                        {tech.status.replace('_', ' ')}
                      </span>
                    </div>
                  </button>
                ))}
              </div>
              
              <div className="flex justify-end space-x-3 mt-6">
                <button
                  onClick={() => setSelectedJob(null)}
                  className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VeroFieldDispatcherDashboard;