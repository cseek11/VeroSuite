generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE SYSTEM MODELS
// ============================================================================

model Tenant {
  id                String          @id @default(uuid()) @db.Uuid
  name              String          @db.VarChar(255)
  domain            String?         @unique @db.VarChar(100)
  status            String          @default("active") @db.VarChar(20)
  subscription_tier String          @default("basic") @db.VarChar(20)
  created_at        DateTime        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime        @updatedAt @db.Timestamptz(6)
  
  // Core Relations
  users             User[]
  accounts          Account[]
  workOrders        WorkOrder[]
  jobs              Job[]
  
  // Enhanced Customer Management
  customerSegments  CustomerSegment[]
  customerProfiles  CustomerProfile[]
  customerContacts  CustomerContact[]
  
  // Service Management
  serviceCategories ServiceCategory[]
  serviceTypes      ServiceType[]
  serviceAreas      ServiceArea[]
  
  // Financial Management
  pricingTiers      PricingTier[]
  servicePricing    ServicePricing[]
  paymentMethods    PaymentMethod[]
  
  // Analytics & Reporting
  customerAnalytics CustomerAnalytics[]
  serviceAnalytics  ServiceAnalytics[]
  
  // Communication & Marketing
  communicationTemplates CommunicationTemplate[]
  automatedCommunications AutomatedCommunication[]
  
  // Compliance & Documentation
  complianceRequirements ComplianceRequirement[]
  complianceRecords ComplianceRecord[]
  
  // Service Management
  technicianSkills TechnicianSkill[]
  
  // System Configuration
  tenantBranding    TenantBranding?
  auditLogs         AuditLog[]

  @@map("tenants")
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  tenant_id     String   @db.Uuid
  email         String   @unique @db.VarChar(255)
  password_hash String   @db.VarChar(255)
  first_name    String   @db.VarChar(100)
  last_name     String   @db.VarChar(100)
  phone         String?  @db.VarChar(20)
  roles         String[] @default([])
  status        String   @default("active") @db.VarChar(20)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @updatedAt @db.Timestamptz(6)
  
  // Relations
  tenant        Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  assignedWorkOrders WorkOrder[] @relation("WorkOrderAssignedTo")
  technicianSkills TechnicianSkill[]
  serviceAnalytics ServiceAnalytics[]
  complianceRecords ComplianceRecord[]

  @@map("users")
}

// ============================================================================
// CUSTOMER SEGMENTATION & SERVICE TYPES
// ============================================================================

model CustomerSegment {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  segment_name          String   @db.VarChar(100)
  segment_code          String   @db.VarChar(20)
  description           String?
  default_service_types Json?
  pricing_tier          String   @default("standard") @db.VarChar(20)
  compliance_requirements Json?
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  updated_at            DateTime @updatedAt @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  customerProfiles      CustomerProfile[]
  
  @@unique([tenant_id, segment_code])
  @@map("customer_segments")
}

model ServiceCategory {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  category_name         String   @db.VarChar(100)
  category_code         String   @db.VarChar(20)
  description           String?
  applicable_segments   Json?
  estimated_duration    Int      @default(60)
  base_price            Decimal? @db.Decimal(10, 2)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  serviceTypes          ServiceType[]
  
  @@unique([tenant_id, category_code])
  @@map("service_categories")
}

model ServiceType {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  category_id           String?  @db.Uuid
  service_name          String   @db.VarChar(100)
  service_code          String   @db.VarChar(20)
  description           String?
  required_equipment    Json?
  required_chemicals    Json?
  safety_requirements   Json?
  compliance_requirements Json?
  estimated_duration    Int      @default(60)
  base_price            Decimal? @db.Decimal(10, 2)
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  category              ServiceCategory? @relation(fields: [category_id], references: [id])
  technicianSkills      TechnicianSkill[]
  servicePricing        ServicePricing[]
  serviceAnalytics      ServiceAnalytics[]
  
  @@unique([tenant_id, service_code])
  @@map("service_types")
}

// ============================================================================
// ENHANCED CUSTOMER MANAGEMENT
// ============================================================================

model Account {
  id                       String                  @id @default(uuid()) @db.Uuid
  tenant_id                String                  @db.Uuid
  name                     String                  @db.VarChar(255)
  account_type             String                  @default("commercial") @db.VarChar(20)
  status                   String                  @default("active") @db.VarChar(20)
  phone                    String?                 @db.VarChar(20)
  email                    String?                 @db.VarChar(255)
  address                  String?
  city                     String?                 @db.VarChar(100)
  state                    String?                 @db.VarChar(20)
  zip_code                 String?                 @db.VarChar(20)
  billing_address          Json?
  payment_method           String?                 @db.VarChar(50)
  billing_cycle            String?                 @db.VarChar(20)
  property_type            String?                 @db.VarChar(50)
  property_size            String?                 @db.VarChar(50)
  access_instructions      String?
  emergency_contact        String?                 @db.VarChar(100)
  preferred_contact_method String?                 @db.VarChar(20)
  ar_balance               Decimal                 @default(0) @db.Decimal(10, 2)
  created_at               DateTime                @default(now()) @db.Timestamptz(6)
  updated_at               DateTime                @updatedAt @db.Timestamptz(6)
  
  // Core Relations
  tenant                   Tenant                  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  locations                Location[]
  workOrders               WorkOrder[]
  jobs                     Job[]
  
  // Enhanced Customer Management
  customerProfile          CustomerProfile?
  customerContacts         CustomerContact[]
  
  // Financial Management
  paymentMethods           PaymentMethod[]
  
  // Analytics & Communication
  customerAnalytics        CustomerAnalytics[]
  automatedCommunications  AutomatedCommunication[]
  
  // Compliance
  complianceRecords        ComplianceRecord[]
  
  // Legacy Relations (for backward compatibility)
  businessAnalytics        BusinessAnalytics[]
  chemicalUsage            ChemicalUsageLog[]
  communicationLogs        CommunicationLog[]
  complianceTracking       ComplianceTracking[]
  contracts                ContractsSubscription[]
  customerDocuments        CustomerDocument[]
  customerNotes            CustomerNote[]
  customerPhotos           CustomerPhoto[]
  pestActivity             PestActivityTracking[]
  serviceHistory           ServiceHistory[]

  @@unique([tenant_id, id])
  @@map("accounts")
}

model CustomerProfile {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  account_id            String   @db.Uuid
  segment_id            String?  @db.Uuid
  
  // Business Information
  business_name         String?  @db.VarChar(255)
  business_type         String?  @db.VarChar(100)
  tax_id                String?  @db.VarChar(50)
  credit_limit          Decimal? @db.Decimal(10, 2)
  credit_score          Int?
  credit_check_date     DateTime? @db.Date
  
  // Property Information
  property_type         String?  @db.VarChar(50)
  property_size         String?  @db.VarChar(50)
  year_built            Int?
  square_footage        Int?
  
  // Access Information
  access_codes          String?
  gate_codes            String?
  key_locations         String?
  special_instructions  String?
  
  // Communication Preferences
  preferred_language    String   @default("English") @db.VarChar(20)
  timezone              String   @default("UTC") @db.VarChar(20)
  communication_methods Json?
  
  // Contract Information
  contract_start_date   DateTime? @db.Date
  contract_end_date     DateTime? @db.Date
  contract_type         String?  @db.VarChar(50)
  contract_value        Decimal? @db.Decimal(10, 2)
  auto_renew            Boolean  @default(false)
  cancellation_policy   String?
  
  // Status Information
  account_status        String   @default("active") @db.VarChar(20)
  payment_status        String   @default("current") @db.VarChar(20)
  service_status        String   @default("scheduled") @db.VarChar(20)
  
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  updated_at            DateTime @updatedAt @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  account               Account  @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  segment               CustomerSegment? @relation(fields: [segment_id], references: [id])
  
  @@unique([tenant_id, account_id])
  @@map("customer_profiles")
}

model CustomerContact {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  account_id            String   @db.Uuid
  contact_type          String   @db.VarChar(20) // primary, secondary, emergency, billing
  first_name            String?  @db.VarChar(100)
  last_name             String?  @db.VarChar(100)
  email                 String?  @db.VarChar(255)
  phone                 String?  @db.VarChar(20)
  mobile                String?  @db.VarChar(20)
  position              String?  @db.VarChar(100)
  is_primary            Boolean  @default(false)
  is_emergency_contact  Boolean  @default(false)
  preferred_contact_method String? @db.VarChar(20)
  notes                 String?
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  account               Account  @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  automatedCommunications AutomatedCommunication[]
  
  @@unique([tenant_id, account_id, contact_type])
  @@map("customer_contacts")
}

model Location {
  id              String      @id @default(uuid()) @db.Uuid
  tenant_id       String      @db.Uuid
  account_id      String      @db.Uuid
  name            String      @db.VarChar(255)
  address_line1   String      @db.VarChar(255)
  address_line2   String?     @db.VarChar(255)
  city            String      @db.VarChar(100)
  state           String      @db.VarChar(20)
  postal_code     String      @db.VarChar(20)
  country         String      @default("US") @db.VarChar(10)
  latitude        Decimal?    @db.Decimal(10, 8)
  longitude       Decimal?    @db.Decimal(11, 8)
  service_area_id String?     @db.Uuid
  created_at      DateTime    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime    @updatedAt @db.Timestamptz(6)
  
  account         Account     @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  jobs            Job[]
  workOrders      WorkOrder[]

  @@unique([tenant_id, id])
  @@map("locations")
}

// ============================================================================
// SERVICE MANAGEMENT & SCHEDULING
// ============================================================================

model WorkOrder {
  id                String    @id @default(uuid()) @db.Uuid
  tenant_id         String    @db.Uuid
  customer_id       String    @db.Uuid
  assigned_to       String?   @db.Uuid
  status            String    @default("pending") @db.VarChar(20)
  priority          String    @default("medium") @db.VarChar(20)
  scheduled_date    DateTime? @db.Timestamptz(6)
  completion_date   DateTime? @db.Timestamptz(6)
  description       String    @db.Text
  notes             String?   @db.Text
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @updatedAt @db.Timestamptz(6)
  
  // Legacy fields for backward compatibility
  account_id        String?   @db.Uuid
  location_id       String?   @db.Uuid
  service_type      String?   @db.VarChar(100)
  recurrence_rule   String?   @db.VarChar(255)
  estimated_duration Int?     @default(60)
  service_price     Decimal?  @db.Decimal(8, 2)
  special_instructions String? @db.Text
  
  // Relations
  jobs              Job[]
  account           Account   @relation(fields: [tenant_id, customer_id], references: [tenant_id, id])
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  assignedTechnician User?    @relation("WorkOrderAssignedTo", fields: [assigned_to], references: [id])
  location          Location? @relation(fields: [tenant_id, location_id], references: [tenant_id, id])

  @@unique([tenant_id, id])
  @@index([tenant_id])
  @@index([customer_id])
  @@index([assigned_to])
  @@index([status])
  @@map("work_orders")
}

model Job {
  id                   String    @id @default(uuid()) @db.Uuid
  tenant_id            String    @db.Uuid
  work_order_id        String    @db.Uuid
  account_id           String    @db.Uuid
  location_id          String    @db.Uuid
  technician_id        String?   @db.Uuid
  status               String    @default("unassigned") @db.VarChar(20)
  priority             String    @default("medium") @db.VarChar(20)
  scheduled_date       DateTime  @db.Date
  scheduled_start_time String?   @db.VarChar(8)
  scheduled_end_time   String?   @db.VarChar(8)
  actual_start_time    DateTime? @db.Timestamptz(6)
  actual_end_time      DateTime? @db.Timestamptz(6)
  completion_notes     String?
  customer_signature   String?   @db.VarChar(500)
  photos               String[]  @default([])
  chemicals_used       Json[]    @default([])
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime  @updatedAt @db.Timestamptz(6)
  
  account              Account   @relation(fields: [tenant_id, account_id], references: [tenant_id, id])
  tenant               Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  location             Location  @relation(fields: [tenant_id, location_id], references: [tenant_id, id])
  workOrder            WorkOrder @relation(fields: [tenant_id, work_order_id], references: [tenant_id, id])

  @@unique([tenant_id, id])
  @@index([tenant_id, technician_id, scheduled_date])
  @@index([tenant_id, account_id])
  @@index([tenant_id, status, scheduled_date])
  @@map("jobs")
}

model ServiceArea {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  area_name             String   @db.VarChar(100)
  area_code             String   @db.VarChar(20)
  description           String?
  boundaries            String?  // GEOGRAPHY(POLYGON) - stored as text for Prisma
  center_lat            Decimal? @db.Decimal(10, 8)
  center_lng            Decimal? @db.Decimal(11, 8)
  estimated_travel_time Int?     // minutes
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  serviceAnalytics      ServiceAnalytics[]
  
  @@unique([tenant_id, area_code])
  @@map("service_areas")
}

model TechnicianSkill {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  technician_id         String   @db.Uuid
  service_type_id       String   @db.Uuid
  skill_level           String   @default("basic") @db.VarChar(20) // basic, intermediate, expert
  certification_required Boolean @default(false)
  certification_expiry  DateTime? @db.Date
  training_completed_date DateTime? @db.Date
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  technician            User     @relation(fields: [technician_id], references: [id])
  serviceType           ServiceType @relation(fields: [service_type_id], references: [id])
  
  @@unique([tenant_id, technician_id, service_type_id])
  @@map("technician_skills")
}

// ============================================================================
// FINANCIAL MANAGEMENT
// ============================================================================

model PricingTier {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  tier_name             String   @db.VarChar(100)
  tier_code             String   @db.VarChar(20)
  description           String?
  base_multiplier       Decimal  @default(1.00) @db.Decimal(5, 2)
  minimum_contract_value Decimal? @db.Decimal(10, 2)
  payment_terms         Int      @default(30) // days
  late_fee_percentage   Decimal  @default(0.00) @db.Decimal(5, 2)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  servicePricing        ServicePricing[]
  
  @@unique([tenant_id, tier_code])
  @@map("pricing_tiers")
}

model ServicePricing {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  service_type_id       String   @db.Uuid
  pricing_tier_id       String   @db.Uuid
  base_price            Decimal  @db.Decimal(10, 2)
  hourly_rate           Decimal? @db.Decimal(10, 2)
  minimum_charge        Decimal? @db.Decimal(10, 2)
  travel_fee            Decimal? @db.Decimal(10, 2)
  emergency_fee         Decimal? @db.Decimal(10, 2)
  effective_date        DateTime @db.Date
  expiry_date           DateTime? @db.Date
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  serviceType           ServiceType @relation(fields: [service_type_id], references: [id])
  pricingTier           PricingTier @relation(fields: [pricing_tier_id], references: [id])
  
  @@unique([tenant_id, service_type_id, pricing_tier_id, effective_date])
  @@map("service_pricing")
}

model PaymentMethod {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  account_id            String   @db.Uuid
  payment_type          String   @db.VarChar(20) // credit_card, ach, check, cash, cod
  payment_name          String?  @db.VarChar(100)
  account_number        String?  @db.VarChar(50)
  routing_number        String?  @db.VarChar(20)
  card_type             String?  @db.VarChar(20)
  card_last4            String?  @db.VarChar(4)
  card_expiry           String?  @db.VarChar(7)
  is_default            Boolean  @default(false)
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  account               Account  @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  
  @@unique([tenant_id, account_id, payment_type])
  @@map("payment_methods")
}

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

model CustomerAnalytics {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  account_id            String   @db.Uuid
  metric_date            DateTime @db.Date
  metric_type            String   @db.VarChar(50) // lifetime_value, service_frequency, payment_history
  metric_value           Decimal  @db.Decimal(15, 4)
  metric_metadata        Json?
  calculated_at          DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  account               Account  @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  
  @@unique([tenant_id, account_id, metric_date, metric_type])
  @@map("customer_analytics")
}

model ServiceAnalytics {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  service_type_id       String?  @db.Uuid
  service_area_id       String?  @db.Uuid
  technician_id         String?  @db.Uuid
  metric_date            DateTime @db.Date
  metric_type            String   @db.VarChar(50) // completion_time, customer_satisfaction, efficiency
  metric_value           Decimal  @db.Decimal(15, 4)
  metric_metadata        Json?
  calculated_at          DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  serviceType           ServiceType? @relation(fields: [service_type_id], references: [id])
  serviceArea           ServiceArea? @relation(fields: [service_area_id], references: [id])
  technician            User? @relation(fields: [technician_id], references: [id])
  
  @@map("service_analytics")
}

// ============================================================================
// COMMUNICATION & MARKETING
// ============================================================================

model CommunicationTemplate {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  template_name          String   @db.VarChar(100)
  template_type          String   @db.VarChar(50) // email, sms, letter, notification
  subject                String?  @db.VarChar(255)
  content                String
  variables              Json?    // template variables
  applicable_segments    Json?
  is_active              Boolean  @default(true)
  created_at             DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  automatedCommunications AutomatedCommunication[]
  
  @@map("communication_templates")
}

model AutomatedCommunication {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  account_id            String   @db.Uuid
  template_id           String?  @db.Uuid
  trigger_type          String   @db.VarChar(50) // service_reminder, payment_reminder, follow_up
  trigger_conditions    Json?
  scheduled_date        DateTime? @db.Timestamptz(6)
  sent_date             DateTime? @db.Timestamptz(6)
  status                String   @default("pending") @db.VarChar(20) // pending, sent, failed, cancelled
  recipient_contact_id  String?  @db.Uuid
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  account               Account  @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  template              CommunicationTemplate? @relation(fields: [template_id], references: [id])
  recipientContact      CustomerContact? @relation(fields: [recipient_contact_id], references: [id])
  
  @@map("automated_communications")
}

// ============================================================================
// COMPLIANCE & DOCUMENTATION
// ============================================================================

model ComplianceRequirement {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  requirement_name       String   @db.VarChar(255)
  requirement_type       String   @db.VarChar(50) // epa, fda, usda, state, local
  applicable_segments    Json?
  applicable_service_types Json?
  frequency             String   @db.VarChar(20) // daily, weekly, monthly, quarterly, annually
  documentation_required Boolean  @default(true)
  auto_reminder         Boolean  @default(true)
  reminder_days          Int      @default(30)
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  complianceRecords     ComplianceRecord[]
  
  @@map("compliance_requirements")
}

model ComplianceRecord {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  account_id            String   @db.Uuid
  requirement_id         String   @db.Uuid
  service_id            String?  @db.Uuid
  status                String   @default("pending") @db.VarChar(20) // pending, completed, overdue, waived
  due_date              DateTime @db.Date
  completion_date       DateTime? @db.Date
  completed_by          String?  @db.Uuid
  documentation_url     String?  @db.VarChar(500)
  notes                 String?
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  
  tenant                Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  account               Account  @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  requirement           ComplianceRequirement @relation(fields: [requirement_id], references: [id])
  completedByUser       User? @relation(fields: [completed_by], references: [id])
  
  @@map("compliance_records")
}

// ============================================================================
// LEGACY TABLES (for backward compatibility)
// ============================================================================

model ServiceHistory {
  id                 String   @id @default(uuid()) @db.Uuid
  tenant_id          String   @db.Uuid
  customer_id        String   @db.Uuid
  service_date       DateTime @db.Date
  service_type       String   @db.VarChar(100)
  treatments_applied String?
  technician_id      String?  @db.Uuid
  technician_notes   String?
  before_photos      Json?
  after_photos       Json?
  cost               Decimal  @db.Decimal(10, 2)
  status             String   @default("completed") @db.VarChar(20)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  
  account            Account  @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("service_history")
}

model ContractsSubscription {
  id                String    @id @default(uuid()) @db.Uuid
  tenant_id         String    @db.Uuid
  customer_id       String    @db.Uuid
  contract_type     String    @db.VarChar(50)
  service_frequency String    @db.VarChar(50)
  start_date        DateTime  @db.Date
  end_date          DateTime? @db.Date
  auto_renewal      Boolean   @default(true)
  contract_value    Decimal   @db.Decimal(10, 2)
  payment_schedule  String?   @db.VarChar(50)
  terms_conditions  String?
  signed_date       DateTime? @db.Date
  status            String    @default("active") @db.VarChar(20)
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  
  account           Account   @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("contracts_subscriptions")
}

model CommunicationLog {
  id                 String    @id @default(uuid()) @db.Uuid
  tenant_id          String    @db.Uuid
  customer_id        String    @db.Uuid
  communication_type String    @db.VarChar(50)
  direction          String    @db.VarChar(20)
  subject            String?   @db.VarChar(255)
  message_content    String?
  staff_member       String?   @db.VarChar(100)
  timestamp          DateTime  @default(now()) @db.Timestamptz(6)
  follow_up_required Boolean   @default(false)
  follow_up_date     DateTime? @db.Date
  
  account            Account   @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("communication_logs")
}

model CustomerNote {
  id              String   @id @default(uuid()) @db.Uuid
  tenant_id       String   @db.Uuid
  customer_id     String   @db.Uuid
  note_type       String   @db.VarChar(50)
  note_source     String   @db.VarChar(50)
  note_content    String
  created_by      String   @db.VarChar(100)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  priority        String   @default("low") @db.VarChar(20)
  is_alert        Boolean  @default(false)
  is_internal     Boolean  @default(false)
  technician_id   String?  @db.Uuid
  work_order_id   String?  @db.Uuid
  location_coords String?  @db.VarChar(100)
  
  account         Account  @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("customer_notes")
}

model PestActivityTracking {
  id                   String   @id @default(uuid()) @db.Uuid
  tenant_id            String   @db.Uuid
  customer_id          String   @db.Uuid
  pest_type            String   @db.VarChar(100)
  severity_level       Int
  location_on_property String?  @db.VarChar(255)
  weather_conditions   String?  @db.VarChar(100)
  temperature          Decimal? @db.Decimal(5, 2)
  humidity             Decimal? @db.Decimal(5, 2)
  season               String?  @db.VarChar(20)
  treatment_applied    String?  @db.VarChar(255)
  effectiveness_score  Int?
  recorded_by          String?  @db.VarChar(100)
  recorded_at          DateTime @default(now()) @db.Timestamptz(6)
  gps_coordinates      String?  @db.VarChar(100)
  photo_evidence_ids   Json?
  
  account              Account  @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("pest_activity_tracking")
}

model ComplianceTracking {
  id                String    @id @default(uuid()) @db.Uuid
  tenant_id         String    @db.Uuid
  customer_id       String    @db.Uuid
  compliance_type   String    @db.VarChar(50)
  requirement       String    @db.VarChar(255)
  due_date          DateTime  @db.Date
  completion_date   DateTime? @db.Date
  status            String    @default("pending") @db.VarChar(20)
  assigned_to       String?   @db.VarChar(100)
  notes             String?
  documentation_url String?   @db.VarChar(500)
  
  account           Account   @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("compliance_tracking")
}

model TechnicianCertification {
  id                    String   @id @default(uuid()) @db.Uuid
  tenant_id             String   @db.Uuid
  technician_id         String   @db.Uuid
  certification_type    String   @db.VarChar(100)
  issuing_authority     String   @db.VarChar(100)
  issue_date            DateTime @db.Date
  expiration_date       DateTime @db.Date
  status                String   @default("active") @db.VarChar(20)
  renewal_reminder_sent Boolean  @default(false)
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, id])
  @@map("technician_certifications")
}

model ChemicalUsageLog {
  id                 String   @id @default(uuid()) @db.Uuid
  tenant_id          String   @db.Uuid
  customer_id        String   @db.Uuid
  service_id         String?  @db.Uuid
  chemical_name      String   @db.VarChar(255)
  epa_number         String?  @db.VarChar(50)
  application_rate   Decimal? @db.Decimal(8, 4)
  total_amount_used  Decimal? @db.Decimal(8, 4)
  application_method String?  @db.VarChar(100)
  target_pest        String?  @db.VarChar(100)
  technician_id      String?  @db.Uuid
  application_date   DateTime @default(now()) @db.Timestamptz(6)
  weather_conditions String?  @db.VarChar(100)
  safety_precautions String?
  
  account            Account  @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("chemical_usage_log")
}

model CustomerPhoto {
  id                 String   @id @default(uuid()) @db.Uuid
  tenant_id          String   @db.Uuid
  customer_id        String   @db.Uuid
  photo_type         String   @db.VarChar(50)
  photo_category     String   @db.VarChar(50)
  file_url           String   @db.VarChar(500)
  thumbnail_url      String?  @db.VarChar(500)
  file_size          Int?
  taken_by           String?  @db.VarChar(100)
  taken_at           DateTime @default(now()) @db.Timestamptz(6)
  work_order_id      String?  @db.Uuid
  location_coords    String?  @db.VarChar(100)
  description        String?
  is_before_photo    Boolean  @default(false)
  is_customer_facing Boolean  @default(true)
  pest_type          String?  @db.VarChar(100)
  treatment_area     String?  @db.VarChar(255)
  
  account            Account  @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("customer_photos")
}

model BusinessAnalytics {
  id                    String    @id @default(uuid()) @db.Uuid
  tenant_id             String    @db.Uuid
  customer_id           String    @db.Uuid
  metric_type           String    @db.VarChar(50)
  metric_value          Decimal   @db.Decimal(10, 4)
  calculated_date       DateTime  @default(now()) @db.Timestamptz(6)
  factors               Json?
  prediction_confidence Decimal?  @db.Decimal(5, 4)
  next_review_date      DateTime? @db.Date
  
  account               Account   @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("business_analytics")
}

model CustomerDocument {
  id            String    @id @default(uuid()) @db.Uuid
  tenant_id     String    @db.Uuid
  customer_id   String    @db.Uuid
  document_type String    @db.VarChar(50)
  document_name String    @db.VarChar(255)
  file_url      String    @db.VarChar(500)
  file_size     Int?
  mime_type     String?   @db.VarChar(100)
  uploaded_by   String?   @db.VarChar(100)
  uploaded_at   DateTime  @default(now()) @db.Timestamptz(6)
  document_date DateTime? @db.Date
  
  account       Account   @relation(fields: [tenant_id, customer_id], references: [tenant_id, id], onDelete: Cascade)

  @@unique([tenant_id, id])
  @@map("customer_documents")
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

model TenantBranding {
  id         String   @id @default(uuid()) @db.Uuid
  tenant_id  String   @unique @db.Uuid
  theme_json Json     @default("{}")
  logo_url   String?  @db.VarChar(500)
  version    String   @default("1.0.0") @db.VarChar(20)
  status     String   @default("published") @db.VarChar(20)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  
  tenant     Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("tenant_branding")
}

model AuditLog {
  id            String   @id @default(uuid()) @db.Uuid
  tenant_id     String   @db.Uuid
  user_id       String?  @db.Uuid
  action        String   @db.VarChar(50)
  resource_type String   @db.VarChar(50)
  resource_id   String?  @db.Uuid
  before_state  Json?
  after_state   Json?
  request_id    String   @db.Uuid
  ip_address    String?  @db.Inet
  user_agent    String?
  timestamp     DateTime @default(now()) @db.Timestamptz(6)

  tenant        Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([tenant_id, timestamp(sort: Desc)])
  @@map("audit_logs")
}
