import React, { useState, useEffect } from 'react';
import { 
  Calendar, 
  MapPin, 
  Clock, 
  User, 
  Phone, 
  Camera, 
  CheckCircle, 
  Play, 
  Square, 
  Navigation, 
  Droplets, 
  FileText, 
  Upload,
  Wifi,
  WifiOff,
  RotateCcw,
  Battery,
  Zap
} from 'lucide-react';

// Mock offline storage simulation
const mockOfflineStorage = {
  jobs: [],
  pendingSync: [],
  photos: [],
  signatures: []
};

// Mock GPS location
const mockGPS = {
  latitude: 40.4406,
  longitude: -79.9959,
  accuracy: 5
};

// Simulated API responses matching our backend
const mockApiResponses = {
  todaysJobs: [
    {
      id: 'job1',
      status: 'scheduled',
      priority: 'high',
      scheduled_date: '2025-08-18',
      time_window: { start: '09:00', end: '11:00' },
      customer: {
        id: 'account1',
        name: 'Downtown Restaurant Group',
        type: 'commercial'
      },
      location: {
        id: 'location1',
        name: 'Main Street Location',
        address: '123 Main St, Pittsburgh, PA 15222',
        coordinates: { lat: 40.4406, lng: -79.9959 }
      },
      service: {
        type: 'Monthly Service',
        description: 'Interior and exterior pest control treatment',
        estimated_duration: 90,
        price: 185.00,
        special_instructions: 'Kitchen treatment required - restaurant opens at 11 AM. Use low-odor chemicals.'
      },
      technician_id: 'tech1',
      actual_times: {
        started_at: null,
        completed_at: null
      },
      completion_data: {
        notes: null,
        signature: null,
        photos: [],
        chemicals_used: []
      }
    },
    {
      id: 'job2',
      status: 'scheduled',
      priority: 'medium',
      scheduled_date: '2025-08-18',
      time_window: { start: '13:30', end: '15:30' },
      customer: {
        id: 'account2',
        name: 'Office Complex LLC',
        type: 'commercial'
      },
      location: {
        id: 'location2',
        name: 'Corporate Plaza',
        address: '789 Liberty Ave, Pittsburgh, PA 15222',
        coordinates: { lat: 40.4417, lng: -79.9901 }
      },
      service: {
        type: 'Quarterly Service',
        description: 'Comprehensive building treatment',
        estimated_duration: 120,
        price: 325.00,
        special_instructions: 'Basement and parking garage treatment. Contact security desk on arrival.'
      },
      technician_id: 'tech1',
      actual_times: {
        started_at: null,
        completed_at: null
      },
      completion_data: {
        notes: null,
        signature: null,
        photos: [],
        chemicals_used: []
      }
    },
    {
      id: 'job3',
      status: 'completed',
      priority: 'high',
      scheduled_date: '2025-08-18',
      time_window: { start: '07:30', end: '09:30' },
      customer: {
        id: 'account3',
        name: 'Westfield Apartments',
        type: 'residential'
      },
      location: {
        id: 'location3',
        name: 'Building A',
        address: '321 Fifth Ave, Pittsburgh, PA 15222',
        coordinates: { lat: 40.4472, lng: -79.9473 }
      },
      service: {
        type: 'Bed Bug Treatment',
        description: 'Heat treatment and chemical application',
        estimated_duration: 180,
        price: 850.00,
        special_instructions: 'Units 2A, 2B, 3C - residents relocated. Use heat treatment protocol.'
      },
      technician_id: 'tech1',
      actual_times: {
        started_at: '2025-08-18T07:45:00Z',
        completed_at: '2025-08-18T10:30:00Z'
      },
      completion_data: {
        notes: 'Heat treatment successful. All units treated according to protocol. Recommended follow-up in 2 weeks.',
        signature: 'signature_url_123.png',
        photos: ['before_photo_1.jpg', 'after_photo_1.jpg', 'treatment_photo_1.jpg'],
        chemicals_used: [
          {
            product_id: 'chem1',
            name: 'Temprid FX',
            epa_reg_no: '264-1025',
            amount_used: 1.5,
            concentration: '0.25%',
            application_method: 'spray',
            target_pest: 'bed_bugs'
          }
        ]
      }
    }
  ]
};

const mockChemicals = [
  {
    id: 'chem1',
    name: 'Temprid FX',
    epa_reg_no: '264-1025',
    active_ingredients: 'Beta-Cyfluthrin, Imidacloprid',
    target_pests: ['bed_bugs', 'ants', 'cockroaches'],
    default_concentration: '0.25%',
    application_methods: ['spray', 'crack_and_crevice']
  },
  {
    id: 'chem2',
    name: 'Advion Cockroach Gel',
    epa_reg_no: '352-652',
    active_ingredients: 'Indoxacarb',
    target_pests: ['cockroaches'],
    default_concentration: '0.6%',
    application_methods: ['gel_bait', 'spot_treatment']
  },
  {
    id: 'chem3',
    name: 'Phantom Termiticide',
    epa_reg_no: '241-392',
    active_ingredients: 'Chlorfenapyr',
    target_pests: ['termites', 'ants'],
    default_concentration: '0.5%',
    application_methods: ['spray', 'soil_treatment']
  }
];

const VeroFieldMobileApp = () => {
  const [currentScreen, setCurrentScreen] = useState('jobList');
  const [selectedJob, setSelectedJob] = useState(null);
  const [jobs, setJobs] = useState([]);
  const [isOnline, setIsOnline] = useState(true);
  const [syncStatus, setSyncStatus] = useState('synced');
  const [currentLocation, setCurrentLocation] = useState(mockGPS);
  const [jobTimer, setJobTimer] = useState(null);
  const [capturedPhotos, setCapturedPhotos] = useState([]);
  const [completionForm, setCompletionForm] = useState({
    notes: '',
    signature: null,
    chemicals_used: [],
    work_performed: ''
  });

  // Simulate network status changes
  useEffect(() => {
    const interval = setInterval(() => {
      // Randomly simulate network changes for demo
      if (Math.random() < 0.05) { // 5% chance every second
        setIsOnline(prev => !prev);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // Load jobs on app start
  useEffect(() => {
    loadTodaysJobs();
  }, []);

  // Simulate job timer for active job
  useEffect(() => {
    let timer;
    if (jobTimer) {
      timer = setInterval(() => {
        setJobTimer(prev => ({
          ...prev,
          elapsed: Date.now() - prev.startTime
        }));
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [jobTimer]);

  const loadTodaysJobs = async () => {
    try {
      // Simulate API call with offline fallback
      if (isOnline) {
        const response = mockApiResponses.todaysJobs;
        setJobs(response);
        
        // Store in offline storage
        mockOfflineStorage.jobs = response;
        setSyncStatus('synced');
      } else {
        // Load from offline storage
        setJobs(mockOfflineStorage.jobs);
        setSyncStatus('offline');
      }
    } catch (error) {
      console.error('Failed to load jobs:', error);
      setJobs(mockOfflineStorage.jobs);
      setSyncStatus('error');
    }
  };

  const startJob = async (job) => {
    const startTime = Date.now();
    const updatedJob = {
      ...job,
      status: 'in_progress',
      actual_times: {
        ...job.actual_times,
        started_at: new Date().toISOString()
      }
    };

    // Update local state
    setJobs(jobs.map(j => j.id === job.id ? updatedJob : j));
    setSelectedJob(updatedJob);
    setJobTimer({
      jobId: job.id,
      startTime,
      elapsed: 0
    });

    // Queue for sync if offline
    if (!isOnline) {
      mockOfflineStorage.pendingSync.push({
        action: 'start_job',
        jobId: job.id,
        data: { started_at: updatedJob.actual_times.started_at },
        timestamp: Date.now()
      });
      setSyncStatus('pending');
    }

    setCurrentScreen('jobDetails');
  };

  const completeJob = async (job, completionData) => {
    const completedJob = {
      ...job,
      status: 'completed',
      actual_times: {
        ...job.actual_times,
        completed_at: new Date().toISOString()
      },
      completion_data: {
        ...completionData,
        photos: capturedPhotos
      }
    };

    // Update local state
    setJobs(jobs.map(j => j.id === job.id ? completedJob : j));
    setJobTimer(null);
    setCapturedPhotos([]);
    setCompletionForm({
      notes: '',
      signature: null,
      chemicals_used: [],
      work_performed: ''
    });

    // Queue for sync if offline
    if (!isOnline) {
      mockOfflineStorage.pendingSync.push({
        action: 'complete_job',
        jobId: job.id,
        data: completedJob.completion_data,
        timestamp: Date.now()
      });
      setSyncStatus('pending');
    }

    setCurrentScreen('jobList');
  };

  const addChemicalUsage = (chemical, amount, concentration, method) => {
    const usage = {
      product_id: chemical.id,
      name: chemical.name,
      epa_reg_no: chemical.epa_reg_no,
      amount_used: parseFloat(amount),
      concentration: concentration,
      application_method: method,
      timestamp: Date.now()
    };

    setCompletionForm(prev => ({
      ...prev,
      chemicals_used: [...prev.chemicals_used, usage]
    }));
  };

  const capturePhoto = (type = 'service') => {
    // Simulate photo capture
    const photo = {
      id: `photo_${Date.now()}`,
      type: type, // 'before', 'after', 'service', 'damage'
      timestamp: Date.now(),
      location: currentLocation,
      url: `mock_photo_${Date.now()}.jpg`
    };

    setCapturedPhotos(prev => [...prev, photo]);
    
    // Store in offline storage
    mockOfflineStorage.photos.push(photo);
  };

  const syncPendingData = async () => {
    if (!isOnline || mockOfflineStorage.pendingSync.length === 0) return;

    setSyncStatus('syncing');
    
    // Simulate sync delay
    setTimeout(() => {
      mockOfflineStorage.pendingSync = [];
      setSyncStatus('synced');
    }, 2000);
  };

  const formatTime = (milliseconds) => {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const getStatusColor = (status) => {
    switch(status) {
      case 'scheduled': return 'bg-blue-100 text-blue-800';
      case 'in_progress': return 'bg-orange-100 text-orange-800';
      case 'completed': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority) => {
    switch(priority) {
      case 'urgent': return 'text-red-600';
      case 'high': return 'text-orange-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-green-600';
      default: return 'text-gray-600';
    }
  };

  // Status bar component
  const StatusBar = () => (
    <div className="flex items-center justify-between p-2 bg-gray-900 text-white text-xs">
      <div className="flex items-center space-x-2">
        <span>9:41 AM</span>
        {isOnline ? <Wifi className="h-3 w-3" /> : <WifiOff className="h-3 w-3" />}
        <Zap className="h-3 w-3" />
        <Battery className="h-3 w-3" />
      </div>
      <div className="flex items-center space-x-2">
        {syncStatus === 'pending' && (
          <button onClick={syncPendingData} className="flex items-center">
            <RotateCcw className="h-3 w-3 mr-1" />
            <span>Sync</span>
          </button>
        )}
        {syncStatus === 'syncing' && (
          <div className="flex items-center">
            <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-1"></div>
            <span>Syncing...</span>
          </div>
        )}
        {syncStatus === 'synced' && isOnline && (
          <div className="flex items-center text-green-400">
            <CheckCircle className="h-3 w-3 mr-1" />
            <span>Synced</span>
          </div>
        )}
        {!isOnline && (
          <div className="flex items-center text-red-400">
            <WifiOff className="h-3 w-3 mr-1" />
            <span>Offline</span>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="max-w-sm mx-auto bg-white shadow-2xl rounded-lg overflow-hidden" style={{ height: '800px' }}>
      <StatusBar />
      
      {/* Job List Screen */}
      {currentScreen === 'jobList' && (
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="bg-blue-600 text-white p-4">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-lg font-semibold">Today's Jobs</h1>
                <p className="text-sm text-blue-100">John Smith • Technician</p>
              </div>
              <div className="text-right">
                <p className="text-sm">{new Date().toLocaleDateString()}</p>
                <p className="text-xs text-blue-100">{jobs.length} jobs</p>
              </div>
            </div>
            
            {/* Quick Stats */}
            <div className="grid grid-cols-3 gap-2 mt-4 text-center">
              <div className="bg-blue-700 rounded p-2">
                <p className="text-xs">Completed</p>
                <p className="text-lg font-bold">{jobs.filter(j => j.status === 'completed').length}</p>
              </div>
              <div className="bg-blue-700 rounded p-2">
                <p className="text-xs">In Progress</p>
                <p className="text-lg font-bold">{jobs.filter(j => j.status === 'in_progress').length}</p>
              </div>
              <div className="bg-blue-700 rounded p-2">
                <p className="text-xs">Scheduled</p>
                <p className="text-lg font-bold">{jobs.filter(j => j.status === 'scheduled').length}</p>
              </div>
            </div>
          </div>

          {/* Job Timer (if active) */}
          {jobTimer && (
            <div className="bg-orange-50 border-l-4 border-orange-400 p-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <Play className="h-4 w-4 text-orange-600 mr-2" />
                  <span className="text-sm font-medium">Job in progress</span>
                </div>
                <div className="text-lg font-bold text-orange-600">
                  {formatTime(jobTimer.elapsed)}
                </div>
              </div>
            </div>
          )}

          {/* Jobs List */}
          <div className="flex-1 overflow-y-auto">
            {jobs.map(job => (
              <div key={job.id} className="border-b border-gray-200 p-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(job.status)}`}>
                        {job.status.replace('_', ' ')}
                      </span>
                      <span className={`text-sm font-medium ${getPriorityColor(job.priority)}`}>
                        {job.priority}
                      </span>
                    </div>
                    
                    <h3 className="font-medium text-gray-900">{job.customer.name}</h3>
                    <p className="text-sm text-gray-600">{job.location.name}</p>
                    <p className="text-xs text-gray-500">{job.location.address}</p>
                    
                    <div className="flex items-center space-x-4 mt-2 text-xs text-gray-600">
                      <div className="flex items-center">
                        <Clock className="h-3 w-3 mr-1" />
                        {job.time_window.start}-{job.time_window.end}
                      </div>
                      <div className="flex items-center">
                        <MapPin className="h-3 w-3 mr-1" />
                        {job.service.estimated_duration}min
                      </div>
                    </div>
                  </div>
                  
                  <button
                    onClick={() => {
                      setSelectedJob(job);
                      setCurrentScreen('jobDetails');
                    }}
                    className="ml-2 px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700"
                  >
                    View
                  </button>
                </div>
              </div>
            ))}
          </div>

          {/* Bottom Navigation */}
          <div className="border-t border-gray-200 p-2">
            <div className="grid grid-cols-3 gap-2">
              <button className="flex flex-col items-center p-2 text-blue-600">
                <Calendar className="h-5 w-5" />
                <span className="text-xs mt-1">Jobs</span>
              </button>
              <button 
                onClick={() => setCurrentScreen('map')}
                className="flex flex-col items-center p-2 text-gray-500"
              >
                <Navigation className="h-5 w-5" />
                <span className="text-xs mt-1">Map</span>
              </button>
              <button 
                onClick={() => setCurrentScreen('profile')}
                className="flex flex-col items-center p-2 text-gray-500"
              >
                <User className="h-5 w-5" />
                <span className="text-xs mt-1">Profile</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Job Details Screen */}
      {currentScreen === 'jobDetails' && selectedJob && (
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="bg-white border-b border-gray-200 p-4">
            <div className="flex items-center justify-between">
              <button
                onClick={() => setCurrentScreen('jobList')}
                className="text-blue-600 text-sm"
              >
                ← Back
              </button>
              <h1 className="text-lg font-semibold">Job Details</h1>
              <div className="w-12" />
            </div>
          </div>

          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {/* Job Status */}
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between mb-2">
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(selectedJob.status)}`}>
                  {selectedJob.status.replace('_', ' ')}
                </span>
                <span className={`text-sm font-medium ${getPriorityColor(selectedJob.priority)}`}>
                  {selectedJob.priority} priority
                </span>
              </div>
              
              {jobTimer && jobTimer.jobId === selectedJob.id && (
                <div className="flex items-center justify-between bg-orange-100 rounded p-2 mt-2">
                  <span className="text-sm font-medium">Time on job:</span>
                  <span className="text-lg font-bold text-orange-600">
                    {formatTime(jobTimer.elapsed)}
                  </span>
                </div>
              )}
            </div>

            {/* Customer Info */}
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <h3 className="font-medium text-gray-900 mb-3">Customer Information</h3>
              <div className="space-y-2">
                <div className="flex items-center">
                  <User className="h-4 w-4 text-gray-400 mr-2" />
                  <span className="text-sm">{selectedJob.customer.name}</span>
                </div>
                <div className="flex items-start">
                  <MapPin className="h-4 w-4 text-gray-400 mr-2 mt-0.5" />
                  <div>
                    <p className="text-sm font-medium">{selectedJob.location.name}</p>
                    <p className="text-xs text-gray-600">{selectedJob.location.address}</p>
                  </div>
                </div>
                <div className="flex items-center">
                  <Clock className="h-4 w-4 text-gray-400 mr-2" />
                  <span className="text-sm">{selectedJob.time_window.start} - {selectedJob.time_window.end}</span>
                </div>
              </div>
            </div>

            {/* Service Details */}
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <h3 className="font-medium text-gray-900 mb-3">Service Details</h3>
              <div className="space-y-2">
                <div>
                  <p className="text-sm font-medium">{selectedJob.service.type}</p>
                  <p className="text-xs text-gray-600">{selectedJob.service.description}</p>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Duration:</span>
                  <span>{selectedJob.service.estimated_duration} minutes</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Value:</span>
                  <span className="font-medium">${selectedJob.service.price.toFixed(2)}</span>
                </div>
              </div>
              
              {selectedJob.service.special_instructions && (
                <div className="mt-3 p-2 bg-yellow-50 border-l-4 border-yellow-400 rounded">
                  <p className="text-xs font-medium text-yellow-800">Special Instructions:</p>
                  <p className="text-xs text-yellow-700 mt-1">{selectedJob.service.special_instructions}</p>
                </div>
              )}
            </div>

            {/* Action Buttons */}
            {selectedJob.status === 'scheduled' && (
              <button
                onClick={() => startJob(selectedJob)}
                className="w-full bg-green-600 text-white py-3 rounded-lg font-medium hover:bg-green-700 flex items-center justify-center"
              >
                <Play className="h-5 w-5 mr-2" />
                Start Job
              </button>
            )}

            {selectedJob.status === 'in_progress' && (
              <div className="space-y-2">
                <button
                  onClick={() => setCurrentScreen('photoCapture')}
                  className="w-full bg-blue-600 text-white py-2 rounded-lg font-medium hover:bg-blue-700 flex items-center justify-center"
                >
                  <Camera className="h-4 w-4 mr-2" />
                  Take Photos ({capturedPhotos.length})
                </button>
                <button
                  onClick={() => setCurrentScreen('chemicalUsage')}
                  className="w-full bg-purple-600 text-white py-2 rounded-lg font-medium hover:bg-purple-700 flex items-center justify-center"
                >
                  <Droplets className="h-4 w-4 mr-2" />
                  Log Chemicals
                </button>
                <button
                  onClick={() => setCurrentScreen('jobCompletion')}
                  className="w-full bg-orange-600 text-white py-3 rounded-lg font-medium hover:bg-orange-700 flex items-center justify-center"
                >
                  <Square className="h-5 w-5 mr-2" />
                  Complete Job
                </button>
              </div>
            )}

            {/* Completed Job Summary */}
            {selectedJob.status === 'completed' && selectedJob.completion_data && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <h3 className="font-medium text-green-900 mb-3">Job Completed</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span>Started:</span>
                    <span>{new Date(selectedJob.actual_times.started_at).toLocaleTimeString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Completed:</span>
                    <span>{new Date(selectedJob.actual_times.completed_at).toLocaleTimeString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Duration:</span>
                    <span>
                      {Math.round((new Date(selectedJob.actual_times.completed_at) - new Date(selectedJob.actual_times.started_at)) / 60000)} minutes
                    </span>
                  </div>
                  {selectedJob.completion_data.photos.length > 0 && (
                    <div className="flex justify-between">
                      <span>Photos:</span>
                      <span>{selectedJob.completion_data.photos.length} captured</span>
                    </div>
                  )}
                  {selectedJob.completion_data.chemicals_used.length > 0 && (
                    <div className="flex justify-between">
                      <span>Chemicals:</span>
                      <span>{selectedJob.completion_data.chemicals_used.length} products used</span>
                    </div>
                  )}
                </div>
                
                {selectedJob.completion_data.notes && (
                  <div className="mt-3">
                    <p className="text-sm font-medium text-green-900">Service Notes:</p>
                    <p className="text-sm text-green-800 mt-1">{selectedJob.completion_data.notes}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Photo Capture Screen */}
      {currentScreen === 'photoCapture' && (
        <div className="flex flex-col h-full">
          <div className="bg-white border-b border-gray-200 p-4">
            <div className="flex items-center justify-between">
              <button
                onClick={() => setCurrentScreen('jobDetails')}
                className="text-blue-600 text-sm"
              >
                ← Back
              </button>
              <h1 className="text-lg font-semibold">Photo Capture</h1>
              <div className="w-12" />
            </div>
          </div>

          <div className="flex-1 p-4">
            {/* Photo Categories */}
            <div className="grid grid-cols-2 gap-3 mb-6">
              <button
                onClick={() => capturePhoto('before')}
                className="flex flex-col items-center p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-400"
              >
                <Camera className="h-8 w-8 text-gray-400 mb-2" />
                <span className="text-sm font-medium">Before Photos</span>
                <span className="text-xs text-gray-500">
                  {capturedPhotos.filter(p => p.type === 'before').length} captured
                </span>