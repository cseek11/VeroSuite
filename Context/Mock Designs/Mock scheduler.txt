import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";

// Mock MapContainer components since react-leaflet isn't available
const MapContainer = ({ children, center, zoom, style }) => (
  <div style={style} className="bg-slate-100 rounded-lg relative overflow-hidden">
    <div className="absolute inset-0 flex items-center justify-center text-slate-500">
      Map View (NYC Area)
      <br />
      <small>Center: {center[0]}, {center[1]} | Zoom: {zoom}</small>
    </div>
    {children}
  </div>
);

const TileLayer = () => null;
const Marker = ({ children, position }) => (
  <div 
    className="absolute w-6 h-6 bg-red-500 rounded-full border-2 border-white shadow-lg transform -translate-x-3 -translate-y-6 z-10"
    style={{ 
      left: `${Math.random() * 80 + 10}%`, 
      top: `${Math.random() * 70 + 15}%` 
    }}
  >
    {children}
  </div>
);
const Polyline = ({ color }) => (
  <svg className="absolute inset-0 w-full h-full pointer-events-none">
    <path 
      d="M 20,50 Q 200,100 400,150 T 600,200" 
      stroke={color} 
      strokeWidth="4" 
      fill="none"
      opacity="0.85"
    />
  </svg>
);
const CircleMarker = ({ center, fillColor, children }) => (
  <div 
    className="absolute w-3 h-3 rounded-full border border-white"
    style={{ 
      backgroundColor: fillColor,
      left: `${Math.random() * 80 + 10}%`, 
      top: `${Math.random() * 70 + 15}%` 
    }}
  >
    {children}
  </div>
);
const Popup = ({ children }) => (
  <div className="hidden group-hover:block absolute bg-white p-2 rounded shadow-lg text-xs whitespace-nowrap z-20">
    {children}
  </div>
);
const Tooltip = ({ children }) => (
  <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-black text-white px-2 py-1 rounded text-xs opacity-0 group-hover:opacity-100 transition-opacity z-20">
    {children}
  </div>
);

// Seed jobs
const seedJobs = [
  { id: "J-101", customer: "John Smith", service: "Termite Inspection", lat: 40.7128, lng: -74.0060, addr: "Manhattan, NY", duration: 90 },
  { id: "J-102", customer: "Maria Lopez", service: "Quarterly General", lat: 40.73061, lng: -73.935242, addr: "Brooklyn, NY", duration: 60 },
  { id: "J-103", customer: "Acme LLC", service: "Rodent Follow-up", lat: 40.8448, lng: -73.8648, addr: "Bronx, NY", duration: 45 },
  { id: "J-104", customer: "C. Baker", service: "German Roach", lat: 40.65, lng: -73.949997, addr: "Queens, NY", duration: 90 },
];

const TECH_COLORS = { "A. Davis": "#2563eb", "B. Patel": "#059669" };

export default function Scheduler() {
  const [assignments, setAssignments] = useState({ "A. Davis": [], "B. Patel": [] });
  const [unassigned, setUnassigned] = useState(seedJobs);
  const [filter, setFilter] = useState("all");

  const handleAssign = (tech, job) => {
    setAssignments(prev => {
      const updated = { ...prev };
      Object.keys(updated).forEach(t => {
        updated[t] = updated[t].filter(j => j.id !== job.id);
      });
      updated[tech] = [...updated[tech], job];
      return updated;
    });
    setUnassigned(prev => prev.filter(j => j.id !== job.id));
  };

  const handleUnassign = job => {
    setUnassigned(prev => [...prev, job]);
    setAssignments(prev => {
      const updated = { ...prev };
      Object.keys(updated).forEach(t => {
        updated[t] = updated[t].filter(j => j.id !== job.id);
      });
      return updated;
    });
  };

  const renderRoute = (tech) => {
    const list = assignments[tech];
    if (list.length < 2) return null;
    return <Polyline positions={list.map(j => [j.lat, j.lng])} color={TECH_COLORS[tech]} weight={4} opacity={0.85} />;
  };

  return (
    <div className="min-h-screen bg-slate-50">
      <div className="flex-1 flex flex-col">
        <header className="bg-white border-b border-slate-200 px-4 py-3 flex items-center justify-between">
          <input
            className="px-3 py-2 border border-slate-300 rounded-lg text-sm w-1/2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Search jobs..."
          />
          <div className="flex items-center gap-3">
            <Button
              variant="secondary"
              onClick={() => {
                setAssignments({ "A. Davis": [], "B. Patel": [] });
                setUnassigned(seedJobs);
              }}
              className="px-4 py-2"
            >
              Reset All
            </Button>

            <Select value={filter} onValueChange={setFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter Techs" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Techs</SelectItem>
                <SelectItem value="A. Davis">A. Davis</SelectItem>
                <SelectItem value="B. Patel">B. Patel</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </header>

        <section className="flex-1 grid grid-cols-1 xl:grid-cols-2 gap-4 p-4">
          {/* Dispatch Panel */}
          <Card className="p-6 flex flex-col">
            <h2 className="font-semibold text-lg mb-4">Dispatch Calendar</h2>
            <div className="grid grid-cols-3 gap-4 h-full">
              {/* Unassigned Jobs */}
              <div>
                <div className="font-medium mb-2 text-sm text-slate-600">
                  Unassigned ({unassigned.length})
                </div>
                <div className="space-y-2 border border-slate-200 rounded-lg p-3 min-h-[400px] bg-slate-50">
                  {unassigned.map(job => (
                    <div
                      key={job.id}
                      className="job-card border border-slate-200 rounded-lg p-3 bg-white cursor-pointer hover:shadow-md transition-shadow"
                      onDoubleClick={() => handleAssign("A. Davis", job)}
                      title="Double-click to assign to A. Davis"
                    >
                      <div className="font-medium text-sm">{job.customer}</div>
                      <div className="text-xs text-slate-500 mt-1">
                        {job.service}
                      </div>
                      <div className="text-xs text-slate-400 mt-1">
                        {job.addr} â€¢ {job.duration}min
                      </div>
                    </div>
                  ))}
                  {unassigned.length === 0 && (
                    <div className="text-slate-400 text-sm text-center mt-8">
                      All jobs assigned
                    </div>
                  )}
                </div>
              </div>

              {/* Tech Assignments */}
              {Object.keys(assignments).map(tech => (
                <div key={tech}>
                  <div className="font-medium text-sm mb-2 flex items-center gap-2">
                    <div 
                      className="w-3 h-3 rounded-full" 
                      style={{ backgroundColor: TECH_COLORS[tech] }}
                    ></div>
                    {tech} ({assignments[tech].length})
                  </div>
                  <div className="space-y-2 border border-slate-200 rounded-lg p-3 min-h-[400px]">
                    {assignments[tech].map((job, idx) => (
                      <div
                        key={job.id}
                        className="job-card border border-slate-200 rounded-lg p-3 bg-slate-50 cursor-pointer hover:bg-white transition-colors group"
                        onDoubleClick={() => handleUnassign(job)}
                        title="Double-click to unassign"
                      >
                        <div className="flex items-center justify-between">
                          <span className="text-xs font-mono text-slate-500">#{idx + 1}</span>
                          <span className="text-xs text-slate-400">{job.duration}min</span>
                        </div>
                        <div className="font-medium text-sm mt-1">{job.customer}</div>
                        <div className="text-xs text-slate-500 mt-1">
                          {job.service}
                        </div>
                        <div className="text-xs text-slate-400 mt-1">
                          {job.addr}
                        </div>
                      </div>
                    ))}
                    {assignments[tech].length === 0 && (
                      <div className="text-slate-400 text-sm text-center mt-8">
                        No jobs assigned
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Map Panel */}
          <Card className="p-6 flex flex-col">
            <h2 className="font-semibold text-lg mb-4">Route Map</h2>
            <MapContainer 
              center={[40.72, -73.97]} 
              zoom={11} 
              style={{ height: "500px", width: "100%" }}
            >
              <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution="&copy; OpenStreetMap contributors" />

              {Object.keys(assignments).map(tech => (
                (filter === "all" || filter === tech) && (
                  <React.Fragment key={tech}>
                    {assignments[tech].map((job, idx) => (
                      <div key={job.id} className="group">
                        <Marker position={[job.lat, job.lng]}>
                          <Popup>
                            <b>{job.customer}</b>
                            <br />{job.service}
                            <br />{job.addr}
                            <br />{tech}
                          </Popup>
                          <Tooltip>{`${tech} #${idx + 1}`}</Tooltip>
                        </Marker>
                      </div>
                    ))}
                    {renderRoute(tech)}
                    {assignments[tech][0] && (
                      <div className="group">
                        <CircleMarker
                          center={[assignments[tech][0].lat, assignments[tech][0].lng]}
                          radius={6}
                          fillColor="#f97316"
                          fillOpacity={0.9}
                          color="#fff"
                          weight={2}
                        >
                          <Tooltip>{`${tech} (GPS)`}</Tooltip>
                        </CircleMarker>
                      </div>
                    )}
                  </React.Fragment>
                )
              ))}
            </MapContainer>

            {/* Map Legend */}
            <div className="mt-4 p-3 bg-slate-50 rounded-lg">
              <h4 className="font-medium text-sm mb-2">Legend</h4>
              <div className="flex flex-wrap gap-4 text-xs">
                {Object.entries(TECH_COLORS).map(([tech, color]) => (
                  <div key={tech} className="flex items-center gap-2">
                    <div 
                      className="w-3 h-3 rounded-full border border-white shadow-sm" 
                      style={{ backgroundColor: color }}
                    ></div>
                    <span>{tech}</span>
                  </div>
                ))}
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-orange-500 border border-white shadow-sm"></div>
                  <span>GPS Location</span>
                </div>
              </div>
            </div>
          </Card>
        </section>
      </div>
    </div>
  );
}