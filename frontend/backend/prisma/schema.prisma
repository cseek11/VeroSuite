generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("postgresql://postgres:[XJ1k0R2E1WQOYcZQ]@db.iehzwglvmbtrlhdgofew.supabase.co:5432/postgres") // Supabase PostgreSQL connection string
}

model Tenant {
  id                 String   @id @default(uuid()) @db.Uuid
  name               String   @db.VarChar(255)
  domain             String?  @unique @db.VarChar(100)
  status             String   @default("active") @db.VarChar(20)
  subscription_tier  String   @default("basic") @db.VarChar(20)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @updatedAt @db.Timestamptz(6)

  users           User[]
  accounts        Account[]
  work_orders     WorkOrder[]
  jobs            Job[]
  tenant_branding TenantBranding?

  @@map("tenants")
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  tenant_id     String   @db.Uuid
  email         String   @unique @db.VarChar(255)
  password_hash String   @db.VarChar(255)
  first_name    String   @db.VarChar(100)
  last_name     String   @db.VarChar(100)
  phone         String?  @db.VarChar(20)
  roles         String[] @default([])
  status        String   @default("active") @db.VarChar(20)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @updatedAt @db.Timestamptz(6)

  tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("users")
}

model Account {
  id            String   @id @default(uuid()) @db.Uuid
  tenant_id     String   @db.Uuid
  name          String   @db.VarChar(255)
  account_type  String   @default("commercial") @db.VarChar(20)
  status        String   @default("active") @db.VarChar(20)
  phone         String?  @db.VarChar(20)
  email         String?  @db.VarChar(255)
  billing_address Json?
  ar_balance    Decimal  @default(0) @db.Decimal(10,2)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @updatedAt @db.Timestamptz(6)

  tenant    Tenant     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  locations Location[]
  work_orders WorkOrder[]

  @@unique([tenant_id, id])
  @@map("accounts")
}

model Location {
  id         String   @id @default(uuid()) @db.Uuid
  tenant_id  String   @db.Uuid
  account_id String   @db.Uuid
  name       String   @db.VarChar(255)
  address_line1 String @db.VarChar(255)
  address_line2 String? @db.VarChar(255)
  city       String   @db.VarChar(100)
  state      String   @db.VarChar(20)
  postal_code String  @db.VarChar(20)
  country    String   @default("US") @db.VarChar(10)
  latitude   Decimal? @db.Decimal(10,8)
  longitude  Decimal? @db.Decimal(11,8)
  service_area_id String? @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  account    Account   @relation(fields: [tenant_id, account_id], references: [tenant_id, id], onDelete: Cascade)
  work_orders WorkOrder[]
  jobs       Job[]

  @@unique([tenant_id, id])
  @@map("locations")
}

model WorkOrder {
  id                   String   @id @default(uuid()) @db.Uuid
  tenant_id            String   @db.Uuid
  account_id           String   @db.Uuid
  location_id          String   @db.Uuid
  service_type         String   @db.VarChar(100)
  description          String?  @db.Text
  recurrence_rule      String?  @db.VarChar(255)
  estimated_duration   Int      @default(60)
  service_price        Decimal  @db.Decimal(8,2)
  special_instructions String?  @db.Text
  status               String   @default("active") @db.VarChar(20)
  created_at           DateTime @default(now()) @db.Timestamptz(6)
  updated_at           DateTime @updatedAt @db.Timestamptz(6)

  tenant   Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  account  Account  @relation(fields: [tenant_id, account_id], references: [tenant_id, id])
  location Location @relation(fields: [tenant_id, location_id], references: [tenant_id, id])
  jobs     Job[]

  @@unique([tenant_id, id])
  @@map("work_orders")
}

model Job {
  id                   String    @id @default(uuid()) @db.Uuid
  tenant_id            String    @db.Uuid
  work_order_id        String    @db.Uuid
  account_id           String    @db.Uuid
  location_id          String    @db.Uuid
  technician_id        String?   @db.Uuid
  status               String    @default("unassigned") @db.VarChar(20)
  priority             String    @default("medium") @db.VarChar(20)
  scheduled_date       DateTime  @db.Date
  scheduled_start_time String?   @db.VarChar(8)
  scheduled_end_time   String?   @db.VarChar(8)
  actual_start_time    DateTime? @db.Timestamptz(6)
  actual_end_time      DateTime? @db.Timestamptz(6)
  completion_notes     String?   @db.Text
  customer_signature   String?   @db.VarChar(500)
  photos               String[]  @default([])
  chemicals_used       Json[]    @default([])
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime  @updatedAt @db.Timestamptz(6)

  tenant     Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  work_order WorkOrder @relation(fields: [tenant_id, work_order_id], references: [tenant_id, id])
  account    Account   @relation(fields: [tenant_id, account_id], references: [tenant_id, id])
  location   Location  @relation(fields: [tenant_id, location_id], references: [tenant_id, id])

  @@unique([tenant_id, id])
  @@index([tenant_id, technician_id, scheduled_date])
  @@index([tenant_id, account_id])
  @@index([tenant_id, status, scheduled_date])
  @@map("jobs")
}

model TenantBranding {
  id         String   @id @default(uuid()) @db.Uuid
  tenant_id  String   @unique @db.Uuid
  theme_json Json     @default("{}")
  logo_url   String?  @db.VarChar(500)
  version    String   @default("1.0.0") @db.VarChar(20)
  status     String   @default("published") @db.VarChar(20)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("tenant_branding")
}

model AuditLog {
  id            String   @id @default(uuid()) @db.Uuid
  tenant_id     String   @db.Uuid
  user_id       String?  @db.Uuid
  action        String   @db.VarChar(50)
  resource_type String   @db.VarChar(50)
  resource_id   String?  @db.Uuid
  before_state  Json?
  after_state   Json?
  request_id    String   @db.Uuid
  ip_address    String?  @db.Inet
  user_agent    String?  @db.Text
  timestamp     DateTime @default(now()) @db.Timestamptz(6)

  @@index([tenant_id, timestamp(sort: Desc)])
  @@map("audit_logs")
}
